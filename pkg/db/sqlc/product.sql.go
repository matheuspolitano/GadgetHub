// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,
  description,
  price,
  stock,
  category_id,
  brand,
  model
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING product_id, name, description, price, stock, category_id, brand, model
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	Stock       int32          `json:"stock"`
	CategoryID  int32          `json:"category_id"`
	Brand       pgtype.Text    `json:"brand"`
	Model       pgtype.Text    `json:"model"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.Brand,
		arg.Model,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.Brand,
		&i.Model,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE product_id = $1
RETURNING product_id, name, description, price, stock, category_id, brand, model
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, name, description, price, stock, category_id, brand, model FROM products
WHERE product_id = $1
`

func (q *Queries) GetProduct(ctx context.Context, productID int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.Brand,
		&i.Model,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT product_id, name, description, price, stock, category_id, brand, model FROM products
WHERE category_id = $1
`

func (q *Queries) GetProductsByCategory(ctx context.Context, categoryID int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.Brand,
			&i.Model,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
  name = COALESCE($1, name),
  description = COALESCE($2, description),
  price = COALESCE($3, price),
  stock = COALESCE($4, stock),
  category_id = COALESCE($5, category_id),
  brand = COALESCE($6, brand),
  model = COALESCE($7, model)
WHERE 
  product_id = $8
RETURNING product_id, name, description, price, stock, category_id, brand, model
`

type UpdateProductParams struct {
	Name        pgtype.Text    `json:"name"`
	Description pgtype.Text    `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	Stock       pgtype.Int4    `json:"stock"`
	CategoryID  pgtype.Int4    `json:"category_id"`
	Brand       pgtype.Text    `json:"brand"`
	Model       pgtype.Text    `json:"model"`
	ProductID   int32          `json:"product_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.Brand,
		arg.Model,
		arg.ProductID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.Brand,
		&i.Model,
	)
	return i, err
}
