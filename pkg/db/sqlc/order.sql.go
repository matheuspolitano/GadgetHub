// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  product_id,
  user_id,
  coupon_id,
  price,
  created_at
) VALUES (
  $1, $2, $3, $4, DEFAULT
) RETURNING order_id, product_id, user_id, coupon_id, price, created_at
`

type CreateOrderParams struct {
	ProductID int32          `json:"product_id"`
	UserID    int32          `json:"user_id"`
	CouponID  pgtype.Int4    `json:"coupon_id"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ProductID,
		arg.UserID,
		arg.CouponID,
		arg.Price,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.UserID,
		&i.CouponID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE order_id = $1
RETURNING order_id, product_id, user_id, coupon_id, price, created_at
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, orderID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, product_id, user_id, coupon_id, price, created_at FROM orders
WHERE order_id = $1
`

func (q *Queries) GetOrder(ctx context.Context, orderID int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.UserID,
		&i.CouponID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getOrdersByProduct = `-- name: GetOrdersByProduct :many
SELECT order_id, product_id, user_id, coupon_id, price, created_at FROM orders
WHERE product_id = $1
`

func (q *Queries) GetOrdersByProduct(ctx context.Context, productID int32) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.ProductID,
			&i.UserID,
			&i.CouponID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
SELECT order_id, product_id, user_id, coupon_id, price, created_at FROM orders
WHERE user_id = $1
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.ProductID,
			&i.UserID,
			&i.CouponID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET 
  product_id = COALESCE($1, product_id),
  user_id = COALESCE($2, user_id),
  coupon_id = COALESCE($3, coupon_id),
  price = COALESCE($4, price)
WHERE 
  order_id = $5
RETURNING order_id, product_id, user_id, coupon_id, price, created_at
`

type UpdateOrderParams struct {
	ProductID pgtype.Int4    `json:"product_id"`
	UserID    pgtype.Int4    `json:"user_id"`
	CouponID  pgtype.Int4    `json:"coupon_id"`
	Price     pgtype.Numeric `json:"price"`
	OrderID   int32          `json:"order_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ProductID,
		arg.UserID,
		arg.CouponID,
		arg.Price,
		arg.OrderID,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.UserID,
		&i.CouponID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
