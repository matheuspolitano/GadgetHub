// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: discountCoupons.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDiscountCoupon = `-- name: CreateDiscountCoupon :one
INSERT INTO discount_coupons (
  created_by,
  discount,
  expires_at
) VALUES (
  $1, $2, $3
) RETURNING coupon_id, discount, created_by, created_at, expires_at
`

type CreateDiscountCouponParams struct {
	CreatedBy int32       `json:"created_by"`
	Discount  float64     `json:"discount"`
	ExpiresAt pgtype.Date `json:"expires_at"`
}

func (q *Queries) CreateDiscountCoupon(ctx context.Context, arg CreateDiscountCouponParams) (DiscountCoupon, error) {
	row := q.db.QueryRow(ctx, createDiscountCoupon, arg.CreatedBy, arg.Discount, arg.ExpiresAt)
	var i DiscountCoupon
	err := row.Scan(
		&i.CouponID,
		&i.Discount,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteDiscountCoupon = `-- name: DeleteDiscountCoupon :exec
DELETE FROM discount_coupons
WHERE coupon_id = $1
RETURNING coupon_id, discount, created_by, created_at, expires_at
`

func (q *Queries) DeleteDiscountCoupon(ctx context.Context, couponID int32) error {
	_, err := q.db.Exec(ctx, deleteDiscountCoupon, couponID)
	return err
}

const getCouponsByCreator = `-- name: GetCouponsByCreator :many
SELECT coupon_id, discount, created_by, created_at, expires_at FROM discount_coupons
WHERE created_by = $1
`

func (q *Queries) GetCouponsByCreator(ctx context.Context, createdBy int32) ([]DiscountCoupon, error) {
	rows, err := q.db.Query(ctx, getCouponsByCreator, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscountCoupon{}
	for rows.Next() {
		var i DiscountCoupon
		if err := rows.Scan(
			&i.CouponID,
			&i.Discount,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscountCoupon = `-- name: GetDiscountCoupon :one
SELECT coupon_id, discount, created_by, created_at, expires_at FROM discount_coupons
WHERE coupon_id = $1
`

func (q *Queries) GetDiscountCoupon(ctx context.Context, couponID int32) (DiscountCoupon, error) {
	row := q.db.QueryRow(ctx, getDiscountCoupon, couponID)
	var i DiscountCoupon
	err := row.Scan(
		&i.CouponID,
		&i.Discount,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
