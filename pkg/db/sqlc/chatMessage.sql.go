// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chatMessage.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChatMessage = `-- name: CreateChatMessage :one
INSERT INTO chat_messages (
  chat_session_id,
  message_received,
  message_sent,
  received_at,
  sent_at,
  action,
  message_before_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING chat_message_id, chat_session_id, message_received, message_sent, received_at, sent_at, action, message_before_id
`

type CreateChatMessageParams struct {
	ChatSessionID   int32              `json:"chat_session_id"`
	MessageReceived pgtype.Text        `json:"message_received"`
	MessageSent     pgtype.Text        `json:"message_sent"`
	ReceivedAt      pgtype.Timestamptz `json:"received_at"`
	SentAt          pgtype.Timestamptz `json:"sent_at"`
	Action          string             `json:"action"`
	MessageBeforeID pgtype.Int4        `json:"message_before_id"`
}

func (q *Queries) CreateChatMessage(ctx context.Context, arg CreateChatMessageParams) (ChatMessage, error) {
	row := q.db.QueryRow(ctx, createChatMessage,
		arg.ChatSessionID,
		arg.MessageReceived,
		arg.MessageSent,
		arg.ReceivedAt,
		arg.SentAt,
		arg.Action,
		arg.MessageBeforeID,
	)
	var i ChatMessage
	err := row.Scan(
		&i.ChatMessageID,
		&i.ChatSessionID,
		&i.MessageReceived,
		&i.MessageSent,
		&i.ReceivedAt,
		&i.SentAt,
		&i.Action,
		&i.MessageBeforeID,
	)
	return i, err
}

const deleteChatMessage = `-- name: DeleteChatMessage :exec
DELETE FROM chat_messages
WHERE chat_message_id = $1
RETURNING chat_message_id, chat_session_id, message_received, message_sent, received_at, sent_at, action, message_before_id
`

func (q *Queries) DeleteChatMessage(ctx context.Context, chatMessageID int32) error {
	_, err := q.db.Exec(ctx, deleteChatMessage, chatMessageID)
	return err
}

const getChatMessage = `-- name: GetChatMessage :one
SELECT chat_message_id, chat_session_id, message_received, message_sent, received_at, sent_at, action, message_before_id FROM chat_messages
WHERE chat_message_id = $1
`

func (q *Queries) GetChatMessage(ctx context.Context, chatMessageID int32) (ChatMessage, error) {
	row := q.db.QueryRow(ctx, getChatMessage, chatMessageID)
	var i ChatMessage
	err := row.Scan(
		&i.ChatMessageID,
		&i.ChatSessionID,
		&i.MessageReceived,
		&i.MessageSent,
		&i.ReceivedAt,
		&i.SentAt,
		&i.Action,
		&i.MessageBeforeID,
	)
	return i, err
}

const getChatMessagesBySession = `-- name: GetChatMessagesBySession :many
SELECT chat_message_id, chat_session_id, message_received, message_sent, received_at, sent_at, action, message_before_id FROM chat_messages
WHERE chat_session_id = $1
`

func (q *Queries) GetChatMessagesBySession(ctx context.Context, chatSessionID int32) ([]ChatMessage, error) {
	rows, err := q.db.Query(ctx, getChatMessagesBySession, chatSessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatMessage{}
	for rows.Next() {
		var i ChatMessage
		if err := rows.Scan(
			&i.ChatMessageID,
			&i.ChatSessionID,
			&i.MessageReceived,
			&i.MessageSent,
			&i.ReceivedAt,
			&i.SentAt,
			&i.Action,
			&i.MessageBeforeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatMessage = `-- name: UpdateChatMessage :one
UPDATE chat_messages
SET 
  chat_session_id = COALESCE($1, chat_session_id),
  message_received = COALESCE($2, message_received),
  message_sent = COALESCE($3, message_sent),
  received_at = COALESCE($4, received_at),
  sent_at = COALESCE($5, sent_at),
  action = COALESCE($6, action),
  message_before_id = COALESCE($7, message_before_id)
WHERE 
  chat_message_id = $8
RETURNING chat_message_id, chat_session_id, message_received, message_sent, received_at, sent_at, action, message_before_id
`

type UpdateChatMessageParams struct {
	ChatSessionID   pgtype.Int4        `json:"chat_session_id"`
	MessageReceived pgtype.Text        `json:"message_received"`
	MessageSent     pgtype.Text        `json:"message_sent"`
	ReceivedAt      pgtype.Timestamptz `json:"received_at"`
	SentAt          pgtype.Timestamptz `json:"sent_at"`
	Action          pgtype.Text        `json:"action"`
	MessageBeforeID pgtype.Int4        `json:"message_before_id"`
	ChatMessageID   int32              `json:"chat_message_id"`
}

func (q *Queries) UpdateChatMessage(ctx context.Context, arg UpdateChatMessageParams) (ChatMessage, error) {
	row := q.db.QueryRow(ctx, updateChatMessage,
		arg.ChatSessionID,
		arg.MessageReceived,
		arg.MessageSent,
		arg.ReceivedAt,
		arg.SentAt,
		arg.Action,
		arg.MessageBeforeID,
		arg.ChatMessageID,
	)
	var i ChatMessage
	err := row.Scan(
		&i.ChatMessageID,
		&i.ChatSessionID,
		&i.MessageReceived,
		&i.MessageSent,
		&i.ReceivedAt,
		&i.SentAt,
		&i.Action,
		&i.MessageBeforeID,
	)
	return i, err
}
