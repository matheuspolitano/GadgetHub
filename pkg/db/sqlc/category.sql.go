// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  name,
  description
) VALUES (
  $1, $2
) RETURNING category_id, name, description
`

type CreateCategoryParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.CategoryID, &i.Name, &i.Description)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE category_id = $1
RETURNING category_id, name, description
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, categoryID)
	return err
}

const getCategoriesByName = `-- name: GetCategoriesByName :many
SELECT category_id, name, description FROM categories
WHERE name ILIKE $1
`

func (q *Queries) GetCategoriesByName(ctx context.Context, name string) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CategoryID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, name, description FROM categories
WHERE category_id = $1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.Name, &i.Description)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one

UPDATE categories
SET 
  name = COALESCE($1, name),
  description = COALESCE($2, description)
WHERE 
  category_id = $3
RETURNING category_id, name, description
`

type UpdateCategoryParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	CategoryID  int32       `json:"category_id"`
}

// Allows searching by name with case-insensitive matching.
func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.Name, arg.Description, arg.CategoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.Name, &i.Description)
	return i, err
}
