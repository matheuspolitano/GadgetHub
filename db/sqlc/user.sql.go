// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  first_name,
  last_name,
  email,
  hash_password,
  phone,
  is_admin
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING user_id, first_name, last_name, email, hash_password, phone, is_admin
`

type CreateUserParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Email        string `json:"email"`
	HashPassword string `json:"hash_password"`
	Phone        string `json:"phone"`
	IsAdmin      bool   `json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashPassword,
		arg.Phone,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashPassword,
		&i.Phone,
		&i.IsAdmin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
where user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}
